snippet	sel
	@selector(${1:method}:)${2}
snippet	prop
	@property (${1:nonatomic, retain}) ${2:NSSomeClass} *${3:some_name};
	${4}
snippet	dict
alias dic map
	NSMutableDictionary *${1:dict} = [[NSMutableDictionary alloc] init];
	${2}
snippet	array
alias list
	NSMutableArray *${1:array} = [@[
		${2:}
	] mutableCopy];
	${3}
snippet	ret
	[${1:foo} retain];${2}
snippet	objc
	@interface ${1:`Filename('', 'object')`} : ${2:NSObject}
	{
	}
	@end

	@implementation $1
	- (id) init
	{
		if (self = [super init])
		{${3}
		}
		return self
	}
	@end
snippet	sm
	- (${1:id}) ${2:method}:(${3:id})${4:anArgument}
	{
		$1 res = [super $2:$4];${5}
		return res;
	}
snippet	cati
	@interface ${1:NSObject} (${2:Category})
	${3}
	@end
snippet	bez
	NSBezierPath *${1:path} = [NSBezierPath bezierPath];${2}
snippet	syn
	@synthesize ${1:NSSomeClass};${2}
snippet	alloc
alias	new
	[[${1:foo} alloc] init]${2};${3}
snippet	objacc
	- (${1:id})${2:thing}
	{
		return $2;
	}

	- (void) set$2:($1)
	{
		$1 old$2 = $2;
		$2 = [aValue retain];
		[old$2 release];
	}
snippet	I
	+ (void) initialize
	{
		[[NSUserDefaults standardUserDefaults] registerDefaults:[NSDictionary dictionaryWIthObjectsAndKeys:
			${1}@"value", @"key",
			nil]];
	}
snippet	cli
	@interface ${1:ClassName} : ${2:NSObject}
	{${3}
	}
	${4}
	@end
snippet	forarray
	unsigned int	${1:object}Count = [${2:array} count];

	for (unsigned int index = 0; index < $1Count; index++)
	{
		${3:id}	$1 = [$2 $1AtIndex:index];
		${4}
	}
snippet	log
	NSLog(@"%${1:@}", ${2:value});
	${3}
snippet	Imp
	#import "${1:`Filename()`.h}"${2}
snippet	cat
	@interface ${1:NSObject} (${2:Category})
	@end

	@implementation $1 ($2)
	${3}
	@end
snippet	m_class method
	+ (${1:id}) ${2:method}
	{${3}
		return nil;
	}
snippet	m_method
	- (${1:id}) ${2:method}
	{${3}
		${4:return nil;}
	}
snippet		[
	[${1:object} ${2:method}${3:}];
snippet	for
	for (${1:int i=0}; ${2:condition}; ${3:i++}) {
		${4}
	}
snippet	format
	[NSString stringWithFormat:@"%${1:d}", ${2:}];
	${3}
snippet		split
	[${1:string} componentsSeparatedByString:@"${2:,}"}];${3:}
snippet		append
	[${1:array} addObject:${2:}];
	${3:}
snippet		reloadData
	[${1:self.tableView} ${2:reloadData}];
	${3:}
snippet		trim
	[${1:string} stringByTrimmingCharactersInSet:[NSCharacterSet newlineCharacterSet]];
	${2:}
snippet	if
	if (${1}) {
		${2}
	}
snippet		removeObjectAtIndex
alias		remove
options		word
	[${1:array_name} removeObjectAtIndex:${2:index}];
	${3:}
snippet		date
options		word
	NSDate* ${1:var_name} = [NSDate date];
	${2:}
snippet		dateformat
alias		dformat
options		word
	NSDateFormatter *df = [[NSDateFormatter alloc] init];
	[df setLocale:[[NSLocale alloc] initWithLocaleIdentifier:@"ja_JP"]];
	[df setDateFormat:@"${1:yyyy/MM/dd HH:mm:ss}"];

	NSString *${2:nowText} = [df stringFromDate:${3:now]}];
	${4:}
snippet		replace
options		word
	NSString *srcText = @"${1:src_text}";
	NSRegularExpression *regexp = [NSRegularExpression
									regularExpressionWithPattern:@"${2:pattern_text}" options:0 error:nil];
	NSString *replacedText = [regexp stringByReplacingMatchesInString:srcText options:0 range:NSMakeRange(0,srcText.length)
									withTemplate:${3:replace_text}];
snippet		alert
options		word
	[[[UIAlertView alloc]
		initWithTitle:${1:title}
			  message:${2:message}
			 delegate:nil
	cancelButtonTitle:nil
	otherButtonTitles:@"閉じる", nil] show];
snippet		datetext
alias		textdate
options		word
	NSDate* ${1:var_name} = [NSDate dateWithNaturalLanguageString:@"${2:years}年 ${3:months}月 ${4:date}日 ${5:hours}時 ${6:minutes}分"];
snippet		userdefaults
alias		defaults
options		word
	NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
	NSMutableArray *${1:var_name} = [defaults objectForKey:@"${2:key_name}"];
	${3:}

	// [defaults synchronize];
snippet		concat
options		word
	[${1:var_name} stringByAppendingString:${2:string}]${3:}
snippet		trim
options		word
	[${1:var_name} stringByTrimmingCharactersInSet:NSCharacterSet whitespaceAndNewlineCharacterSet]${2:}
snippet		substring
options		word
prev_word	'^'
	NSString *str = [${src:} substringWithRange:NSMakeRange(${2:from}, ${3:to})]${4:}
